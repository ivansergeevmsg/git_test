<script type="text/javascript" src="/static/js_static/CUBE_Rotate.js"></script>

<script type="text/javascript" src="/static/js_static/data_01.js"></script>
<script type="text/javascript" src="/static/js_static/graph_2D.js"></script>
<script type="text/javascript" src="/static/js_static/run_graph.js"></script>

<canvas id="webgl" width="1000" height="600" style="position: absolute; z-index: 0">
    Please use a browser that supports "canvas"
    </canvas>
<canvas id="canvas2D" width="1000" height="600" style="position: absolute; z-index: 5"></canvas>
<canvas id="hud" width="1000" height="600" style="position: absolute; z-index: 10"></canvas>

<script id = "VSHADER_SOURCE" type='x-shader/x-vertex'>
    attribute vec4 a_Position;
    attribute vec4 a_Color;
    attribute vec4 a_Normal;
    attribute float a_Face;  // Surface number (Cannot use int for attribute variable)
    uniform mat4 u_MvpMatrix;
    uniform mat4 u_ModelMatrix;
    uniform mat4 u_NormalMatrix;
    uniform vec4 u_Eye;    // Position of eye point (world coordinates)
    uniform int u_PickedFace; // Surface number of selected face
    //uniform vec4 u_Color2;
    uniform vec4 u_Color2m;
    uniform float u_Block_dark; 
    uniform vec3 u_Pos_type;
    uniform float u_Mark;

    //uniform float u_canvas_size;
    //uniform vec2 u_mouse_position;
    
    varying vec4 v_Color;
    varying float v_Dist;
    

    void main() {
        vec4 m_Position;// = a_Position;
      //gl_Position = u_MvpMatrix * u_ModelMatrix * a_Position;

      m_Position = u_ModelMatrix * a_Position;
      gl_Position = u_MvpMatrix * m_Position;
      //gl_Position = u_MvpMatrix * m_Positionn;

      vec3 lightDirection = normalize(vec3(0.2, 0.5, 0.9));
      vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);
      float nDotL = max(dot(normal, lightDirection), 0.2);
      //v_Color = a_Color;
      vec4 Color_t;
      //int A=;
      if(u_Color2m.a==0.0)
      {
        Color_t = vec4(a_Color.rgb * nDotL + vec3(0.1), a_Color.a);
      }
      else
      {
        Color_t = vec4(a_Color.r * u_Color2m.r * nDotL + 0.1,
                        a_Color.g * u_Color2m.g * nDotL + 0.1,
                        a_Color.b * u_Color2m.b * nDotL + 0.1, a_Color.a);
      }     
      
      
        if( u_Mark == 1.0 || ( a_Face==1.0 && u_Pos_type.z==-1.0) || (a_Face==6.0 && u_Pos_type.z== 1.0) || (a_Face==2.0 && u_Pos_type.x==-1.0) || (a_Face==4.0 && u_Pos_type.x== 1.0) || (a_Face==5.0 && u_Pos_type.y==-1.0) || (a_Face==3.0 && u_Pos_type.y== 1.0) )
        {
            if(u_Block_dark<=0.3 || u_Mark == 1.0)
            {
                v_Color = vec4(Color_t.r*(0.1+u_Block_dark), Color_t.g*(1.3+u_Block_dark), Color_t.b*(0.1+u_Block_dark), Color_t.a);
            }
            else
            {
                v_Color = Color_t;
            }
        }
        else
        {
            v_Color = vec4(Color_t.r*u_Block_dark, Color_t.g*u_Block_dark, Color_t.b*u_Block_dark, Color_t.a);
        }
      
      // Calculate the distance to each vertex from eye point
      v_Dist = distance(u_ModelMatrix * a_Position, u_Eye);
    }
</script>

<script id = "FSHADER_SOURCE" type='x-shader/x-fragment'>
   #ifdef GL_ES
   precision mediump float;
   #endif
    uniform vec3 u_FogColor; // Color of Fog
    uniform vec2 u_FogDist;  // Distance of Fog (starting point, end point)
    varying vec4 v_Color;
    varying float v_Dist;
  
    void main() {
        
        float fogFactor = clamp((u_FogDist.y - v_Dist) / (u_FogDist.y - u_FogDist.x), 0.0, 1.0);

        vec3 color = mix(u_FogColor, vec3(v_Color), fogFactor);

        gl_FragColor = vec4(color, fogFactor); 

    }
    
</script>